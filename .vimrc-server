" .vimrc File
" Stripped down for server use
" maintained by Joshua Cottrell

"pathogen for plugins
execute pathogen#infect()

"Forget compatibility with Vi. Who cares.
set nocompatible

" Make <leader> easier to type
let mapleader=","

"Don't worry about the .swp and .swo swap files
set nobackup
set noswapfile

"Enable filetypes
filetype on
filetype plugin on
filetype indent on

"Display current cursor position in lower right corner.
set ruler

"Switch between buffers without saving
set hidden

"Set font type and size. Depends on the resolution. Larger screens, prefer h15
" set guifont=Courier:h15
set guifont=Menlo:h13

" Syntax highlighting
syntax on
" Syntastic checker
" let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
let g:syntastic_php_checkers = ['php']
" vim-phpcs (github.com/bpearson/vim-phpcs) based on
"   (github.com/squizlabs/PHP_CodeSniffer)
"nnoremap <leader>cs :CodeSniff<CR>
" vim-php-cs-fixer (github.com/stephpy/vim-php-cs-fixer) based on
"   (github.com/FriendsOfPHP/PHP-CS-Fixer)
"let g:php_cs_fixer_level = "psr2"              " which level ?
"let g:php_cs_fixer_config = "default"             " configuration
"let g:php_cs_fixer_php_path = "php"               " Path to PHP
"let g:php_cs_fixer_enable_default_mapping = 0     " Enable the mapping by default (<leader>pcd)
"let g:php_cs_fixer_dry_run = 0                    " Call command with dry-run option
"let g:php_cs_fixer_verbose = 0                    " Return the output of command if 1, else an inline information.
"nnoremap <silent><leader>pf :call PhpCsFixerFixFile()<CR>

"Tab stuff
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

"Show command in bottom right portion of the screen
set showcmd

"Show lines numbers
set number

"Indent stuff
set smartindent
set autoindent

"Statusline definition
set statusline=
set statusline=%t				" tail - file name
set statusline+=\ %m			" modified - if current buffer has been modified
set statusline+=\ %{FileSize()}	" file size, see function below
set statusline+=\ (%n)			" buffer number
set statusline+=\ %y			" filetype
set statusline+=\ %{ObsessionStatus()} "vim-obsession status - running or paused
set statusline+=%=				" --right align--
set statusline+=%c%V			" cursor column, virtual column number
set statusline+=\|%l,%L			" cursor line, total lines

function! FileSize()
	let bytes = getfsize(expand("%p"))
	if bytes <= 0
		return ""
	endif
	return bytes
endfunction

"Always show the status line
set laststatus=2

"Prefer a slightly higher line height
set linespace=3

"No line wrapping 
"set nowrap
set wrap linebreak nolist
set formatoptions=qrn1

" Set the $ character to mark the end of your change
set cpoptions+=$

"Set incremental searching
set incsearch

"Highlight searching
set hlsearch

" case insensitive search
set ignorecase
set smartcase

"Hard-wrap paragraphs of text
nnoremap <leader>q gqip

"Hide mouse when typing
set mousehide

" Show/hide hidden characters and redefine the hidden characters
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬

" Delete whitespace at the end of every line before saving according to a whitelist
if has("autocmd")
	autocmd BufWritePre *.txt,*.php,*.rb,*.htmlrb,*.html,*.py,*.js :call <SID>StripTrailingWhitespaces()
end
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

"Shortcut to fold tags with leader (usually \) + ft
nnoremap <leader>ft Vatzf

"Opens a vertical split and switches over (\v)
nnoremap <leader>v <C-w>v<C-w>l

"Split windows below the current window.
set splitbelow              

" session settings
set sessionoptions=resize,winpos,winsize,buffers,tabpages,folds,curdir,help

"Shortcut to enable/disable spell check and set spell check language
nmap <silent> <leader>s :set spell!<CR>
set spelllang=en_us

"Automatically change current directory to that of the file in the buffer
autocmd BufEnter * cd %:p:h

"Map code completion to \ + tab
imap <leader><tab> <C-x><C-o>

" More useful command-line completion
set wildmenu

"Auto-completion menu
set wildmode=list:longest
" more auto-completion, by language
" http://www.brankovukelic.com/post/2091037293/turn-vim-into-powerful-javascript-editor
" Ctrl+Shift+c, Ctrl+Shift+o (other commands are in the article)
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

"http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" File explorer, netrw
let g:netrw_altv      = 1
let g:netrw_preview   = 1
let g:netrw_liststyle = 3
let g:netrw_winsize   = 80
nnoremap <leader>f :40Vex<cr>

" File searcher - ctrlp
let g:ctrlp_map = '<leader>p'

" Indention, especially for visual mode
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv

"Helpeful abbreviations
iab lorem Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
iab llorem Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
iab jqcdn http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js

"Spelling corrects. Just for example. Add yours below.
iab teh the
iab Teh The
